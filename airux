// ==/== AIRUX PRO - VERSÃO OTIMIZADA PARA DEVTOOLS ==/==
if (window.airuxLoaded) {
    console.log('Airux já está carregado. Ignorando nova instância.');
} else {
    window.airuxLoaded = true;

    // Solução alternativa para CORS no DevTools
    window.GM_xmlhttpRequest = function(options) {
        return fetch(options.url, {
            method: options.method,
            headers: options.headers,
            body: options.data,
            mode: 'cors'
        })
        .then(response => response.arrayBuffer())
        .then(data => {
            const responseText = new TextDecoder().decode(data);
            if (options.onload) {
                options.onload({
                    response: data,
                    status: 200,
                    responseText: responseText
                });
            }
        })
        .catch(error => {
            if (options.onerror) {
                options.onerror(error);
            }
        });
    };

    window.GM_notification = function(options) {
        console.log(`[NOTIFICAÇÃO] ${options.text}`);
        if (window.Notification && Notification.permission === 'granted') {
            new Notification(options.title, {body: options.text});
        }
    };

    // Carregar jQuery apenas se necessário
    if (!window.jQuery) {
        const jqScript = document.createElement('script');
        jqScript.src = 'https://code.jquery.com/jquery-3.6.0.min.js';
        jqScript.onload = initAirux;
        document.head.appendChild(jqScript);
    } else {
        setTimeout(initAirux, 100);
    }

    function initAirux() {
        (function() {
            'use strict';

            // Configuração principal
            const CONFIG = {
                name: "Airux Pro",
                version: "2.0",
                theme: {
                    colors: {
                        primary: "#1A1A1D",
                        secondary: "#2D2D32",
                        tertiary: "#3E3E44",
                        accent: "#BB86FC",
                        text: "#E0E0E0",
                        textSecondary: "#9E9E9E",
                        error: "#CF6679",
                        success: "#03DAC6",
                        warning: "#FFC107",
                        border: "#4A4A4F",
                        notificationBg: "rgba(45, 45, 50, 0.9)"
                    },
                    shadows: {
                        container: "0 8px 32px rgba(0, 0, 0, 0.5)",
                        button: "0 4px 8px rgba(0, 0, 0, 0.3)"
                    },
                    radius: "12px"
                },
                apiEndpoints: {
                    blackbox: "https://www.blackbox.ai/api/chat",
                    openai: "https://api.openai.com/v1/chat/completions",
                    deepseek: "https://api.deepseek.com/v1/chat/completions",
                    gemini: "https://generativelanguage.googleapis.com/v1beta/models/"
                },
                models: [
                    { id: "blackbox", name: "Blackbox Default", type: "blackbox", requiresKey: false },
                    { id: "meta-llama/Llama-3.1-70B-Instruct-Turbo", name: "Llama 3.1 Turbo", type: "blackbox", requiresKey: false },
                    { id: "deepseek-chat", name: "Deepseek Chat", type: "deepseek", requiresKey: true },
                    { id: "gpt-4o", name: "GPT-4o", type: "openai", requiresKey: true },
                    { id: "gemini-1.5-pro-latest", name: "Gemini Pro 1.5", type: "gemini", requiresKey: true },
                    { id: "gemini-1.5-flash-latest", name: "Gemini Flash 1.5", type: "gemini", requiresKey: true }
                ],
                API_KEYS_GEMINI: [
                    'AIzaSyBDdSZkgQphf5BORTDLcEUbJWcIAIo0Yr8',
                    'AIzaSyANp5yxdrdGL7RtOXy0LdIdkoKZ7cVPIsc'
                ],
                defaultModel: "blackbox",
                timeout: 30000,
                maxRetries: 3,
                temperature: 0.7,
                maxTokens: 2000,
                notificationDuration: 5000,
                SAFETY_SETTINGS_THRESHOLD: "BLOCK_MEDIUM_AND_ABOVE",
                MAX_OUTPUT_TOKENS: 10
            };

            const IMAGE_FILTERS = {
                blocked: [ /edusp-static\.ip\.tv\/sala-do-futuro\/(?:assets|icons?|logos?|buttons?|banners?)\//i, /s3\.sa-east-1\.amazonaws\.com\/edusp-static\.ip\.tv\/sala-do-futuro\/(?:assets|icons?|logos?|buttons?|banners?)\//i, /s3\.sa-east-1\.amazonaws\.com\/edusp-static\.ip\.tv\/room\/cards\//i, /conteudo_logo\.png$/i, /_thumb(?:nail)?\./i, /\.svg$/i ],
                allowed: [ /edusp-static\.ip\.tv\/(?:tms|tarefas|exercicios)\//i, /\/atividade\/\d+\?eExame=true/i, /\.(?:jpg|png|jpeg|gif|webp)$/i, /lh[0-9]+(?:- G*)*\.googleusercontent\.com/i, /\/media\//i, /\/questao_\d+/i, /image\?/i ],
                verify(src) {
                    if (!src || typeof src !== 'string' || !src.startsWith('http')) return false;
                    if (this.blocked.some(r => r.test(src))) return false;
                    return this.allowed.some(r => r.test(src));
                }
            };

            const STATE = {
                isActive: false,
                isAnalyzing: false,
                selectedModel: CONFIG.defaultModel,
                apiKey: null,
                lastResponse: null,
                retryCount: 0,
                images: [],
                imageCache: {},
                logMessages: [],
                currentApiKeyIndex: 0,
                rateLimitActive: false,
                rateLimitTimeoutId: null
            };

            const elements = {
                container: null,
                input: null,
                responseDiv: null,
                submitBtn: null,
                modelSelect: null,
                apiKeyInput: null,
                toggleBtn: null,
                analyzeBtn: null,
                updateImagesBtn: null,
                clearBtn: null,
                logsBtn: null,
                imagesContainer: null
            };

            function logMessage(level, ...args) {
                const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });
                const message = args.map(arg => {
                    try { return typeof arg === 'object' ? JSON.stringify(arg) : String(arg); }
                    catch { return '[Object]'; }
                }).join(' ');
                STATE.logMessages.push({ timestamp, level, message });
                if (STATE.logMessages.length > 300) STATE.logMessages.shift();
                if (level === 'ERROR') console.error(`[Airux ${timestamp}]`, ...args);
                else if (level === 'WARN') console.warn(`[Airux ${timestamp}]`, ...args);
            }

            function tryParseJSON(jsonString) {
                try {
                    return JSON.parse(jsonString);
                } catch (e) {
                    return null;
                }
            }

            function calculateRetryDelay(retryCount) {
                return Math.min(1000 * Math.pow(2, retryCount), 10000);
            }

            function generateUUID() {
                return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                    const r = Math.random() * 16 | 0;
                    const v = c === 'x' ? r : (r & 0x3 | 0x8);
                    return v.toString(16);
                });
            }

            function sanitizeInput(input) {
                const div = document.createElement('div');
                div.textContent = input;
                return div.innerHTML.replace(/\n/g, '<br>');
            }

            function formatResponse(answer) {
                if (typeof answer !== 'string') return null;
                const trimmed = answer.trim();
                if (/^[A-E]$/.test(trimmed)) return trimmed;
                const bracketMatch = trimmed.match(/^[\[("']?([A-E])[\])"']?$/i);
                if (bracketMatch) return bracketMatch[1].toUpperCase();
                const startMatch = trimmed.match(/^([A-E])[\s.]*$/i);
                if (startMatch && trimmed.length <= 3) return startMatch[1].toUpperCase();
                return null;
            }

            function toggleUI() {
                STATE.isActive = !STATE.isActive;
                if (elements.container) {
                    elements.container.style.display = STATE.isActive ? 'flex' : 'none';
                    elements.container.style.opacity = STATE.isActive ? '1' : '0';
                    elements.container.style.transform = STATE.isActive ? 'translateY(0)' : 'translateY(10px)';
                    elements.toggleBtn.style.opacity = STATE.isActive ? '0.7' : '0.1';
                }
            }

            function showResponse(message, type = 'info') {
                if (!elements.responseDiv) return;

                const colors = {
                    success: CONFIG.theme.colors.success,
                    error: CONFIG.theme.colors.error,
                    warning: CONFIG.theme.colors.warning,
                    info: CONFIG.theme.colors.accent
                };

                const sanitizedMessage = sanitizeInput(message);
                elements.responseDiv.innerHTML = sanitizedMessage;
                elements.responseDiv.style.display = 'block';
                elements.responseDiv.style.color = CONFIG.theme.colors.text;
                elements.responseDiv.style.borderLeft = `4px solid ${colors[type] || colors.info}`;
                elements.responseDiv.scrollTop = elements.responseDiv.scrollHeight;
            }

            function showLoader(show) {
                if (!elements.submitBtn) return;

                if (show) {
                    elements.submitBtn.innerHTML = `
                        <div class="spinner" style="
                            width: 16px;
                            height: 16px;
                            border: 3px solid rgba(255,255,255,0.3);
                            border-radius: 50%;
                            border-top-color: ${CONFIG.theme.colors.accent};
                            animation: spin 1s ease-in-out infinite;
                        "></div>
                        Processando...
                    `;
                    elements.submitBtn.disabled = true;
                    if (elements.analyzeBtn) elements.analyzeBtn.disabled = true;
                } else {
                    elements.submitBtn.innerHTML = 'Enviar';
                    elements.submitBtn.disabled = false;
                    if (elements.analyzeBtn) elements.analyzeBtn.disabled = false;
                }
            }

            function showNotification(message, type = 'info') {
                if (typeof GM_notification === 'function') {
                    const colors = {
                        success: CONFIG.theme.colors.success,
                        error: CONFIG.theme.colors.error,
                        warning: CONFIG.theme.colors.warning,
                        info: CONFIG.theme.colors.accent
                    };

                    GM_notification({
                        text: message,
                        title: `${CONFIG.name} Notification`,
                        highlight: colors[type] || colors.info,
                        timeout: CONFIG.notificationDuration
                    });
                } else {
                    console.log(`[${type.toUpperCase()}] ${message}`);
                }
            }

            function createMainContainer() {
                elements.container = document.createElement('div');
                elements.container.id = 'airux-container';
                elements.container.style.cssText = `
                    position: fixed;
                    bottom: 20px;
                    right: 20px;
                    z-index: 9999;
                    font-family: 'Inter', sans-serif;
                    background: ${CONFIG.theme.colors.primary};
                    color: ${CONFIG.theme.colors.text};
                    border-radius: ${CONFIG.theme.radius};
                    padding: 15px;
                    box-shadow: ${CONFIG.theme.shadows.container};
                    width: 350px;
                    max-height: 80vh;
                    display: ${STATE.isActive ? 'flex' : 'none'};
                    flex-direction: column;
                    transition: all 0.3s ease;
                    transform: ${STATE.isActive ? 'translateY(0)' : 'translateY(10px)'};
                    opacity: ${STATE.isActive ? '1' : '0'};
                    border: 1px solid ${CONFIG.theme.colors.border};
                `;
                document.body.appendChild(elements.container);
            }

            function createHeader() {
                const header = document.createElement('div');
                header.style.cssText = `
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    margin-bottom: 15px;
                    padding-bottom: 10px;
                    border-bottom: 1px solid ${CONFIG.theme.colors.border};
                `;

                const title = document.createElement('h3');
                title.textContent = `${CONFIG.name} v${CONFIG.version}`;
                title.style.cssText = `
                    margin: 0;
                    color: ${CONFIG.theme.colors.accent};
                    font-size: 18px;
                    font-weight: 600;
                `;

                const closeBtn = document.createElement('button');
                closeBtn.innerHTML = '&times;';
                closeBtn.style.cssText = `
                    background: ${CONFIG.theme.colors.secondary};
                    border: none;
                    color: ${CONFIG.theme.colors.textSecondary};
                    font-size: 24px;
                    cursor: pointer;
                    padding: 0 8px;
                    line-height: 1;
                    transition: all 0.2s;
                    border-radius: 50%;
                    width: 24px;
                    height: 24px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                `;
                closeBtn.addEventListener('mouseover', () => {
                    closeBtn.style.color = CONFIG.theme.colors.error;
                    closeBtn.style.transform = 'scale(1.1)';
                });
                closeBtn.addEventListener('mouseout', () => {
                    closeBtn.style.color = CONFIG.theme.colors.textSecondary;
                    closeBtn.style.transform = 'scale(1)';
                });
                closeBtn.addEventListener('click', toggleUI);

                header.appendChild(title);
                header.appendChild(closeBtn);
                elements.container.appendChild(header);
            }

            function createModelSelector() {
                const modelLabel = document.createElement('label');
                modelLabel.textContent = 'Modelo:';
                modelLabel.style.cssText = `
                    display: block;
                    margin-bottom: 8px;
                    font-size: 14px;
                    color: ${CONFIG.theme.colors.textSecondary};
                `;

                elements.modelSelect = document.createElement('select');
                elements.modelSelect.id = 'airux-model-select';
                elements.modelSelect.style.cssText = `
                    width: 100%;
                    padding: 10px 12px;
                    border-radius: 6px;
                    border: 1px solid ${CONFIG.theme.colors.border};
                    background: ${CONFIG.theme.colors.secondary};
                    color: ${CONFIG.theme.colors.text};
                    margin-bottom: 15px;
                    font-size: 14px;
                    transition: all 0.2s;
                    appearance: none;
                    background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='${encodeURIComponent(CONFIG.theme.colors.textSecondary)}'%3e%3cpath d='M7 10l5 5 5-5z'/%3e%3c/svg%3e");
                    background-repeat: no-repeat;
                    background-position: right 10px center;
                    background-size: 16px;
                `;

                CONFIG.models.forEach(model => {
                    const option = document.createElement('option');
                    option.value = model.id;
                    option.textContent = model.name;
                    if (model.id === STATE.selectedModel) {
                        option.selected = true;
                    }
                    elements.modelSelect.appendChild(option);
                });

                elements.modelSelect.addEventListener('change', (e) => {
                    STATE.selectedModel = e.target.value;
                    const selectedModel = CONFIG.models.find(m => m.id === STATE.selectedModel);
                    if (selectedModel && selectedModel.requiresKey) {
                        elements.apiKeyInput.style.display = 'block';
                    } else {
                        elements.apiKeyInput.style.display = 'none';
                    }
                });

                elements.modelSelect.addEventListener('focus', () => {
                    elements.modelSelect.style.borderColor = CONFIG.theme.colors.accent;
                    elements.modelSelect.style.boxShadow = `0 0 0 2px ${CONFIG.theme.colors.accent}30`;
                });

                elements.modelSelect.addEventListener('blur', () => {
                    elements.modelSelect.style.borderColor = CONFIG.theme.colors.border;
                    elements.modelSelect.style.boxShadow = 'none';
                });

                elements.container.appendChild(modelLabel);
                elements.container.appendChild(elements.modelSelect);
            }

            function createAPIKeyInput() {
                const apiKeyLabel = document.createElement('label');
                apiKeyLabel.textContent = 'API Key:';
                apiKeyLabel.style.cssText = `
                    display: block;
                    margin-bottom: 8px;
                    font-size: 14px;
                    color: ${CONFIG.theme.colors.textSecondary};
                `;

                elements.apiKeyInput = document.createElement('input');
                elements.apiKeyInput.type = 'password';
                elements.apiKeyInput.placeholder = 'Insira sua API key (se necessário)';
                elements.apiKeyInput.style.cssText = `
                    width: 100%;
                    padding: 10px;
                    border-radius: 6px;
                    border: 1px solid ${CONFIG.theme.colors.border};
                    background: ${CONFIG.theme.colors.secondary};
                    color: ${CONFIG.theme.colors.text};
                    margin-bottom: 15px;
                    font-size: 14px;
                    transition: all 0.2s;
                    display: none;
                `;

                elements.apiKeyInput.addEventListener('focus', () => {
                    elements.apiKeyInput.style.borderColor = CONFIG.theme.colors.accent;
                    elements.apiKeyInput.style.boxShadow = `0 0 0 2px ${CONFIG.theme.colors.accent}30`;
                });

                elements.apiKeyInput.addEventListener('blur', () => {
                    elements.apiKeyInput.style.borderColor = CONFIG.theme.colors.border;
                    elements.apiKeyInput.style.boxShadow = 'none';
                    STATE.apiKey = elements.apiKeyInput.value.trim();
                });

                const selectedModel = CONFIG.models.find(m => m.id === STATE.selectedModel);
                